{"version":3,"sources":["components/CutsPanel.module.css","components/CutItem.module.css","App.module.css","store/index.ts","utils/format-time.ts","components/PlayerPanel.tsx","components/TimeInput.tsx","components/CutItem.tsx","components/CutsPanel.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","configure","enforceActions","store","makeObservable","this","observable","startTime","endTime","pad","x","formatTime","duration","long","hours","Math","floor","mins","seconds","millis","time","observer","ref","useRef","useState","playing","setPlaying","position","setPosition","useEffect","stopped","requestAnimationFrame","getPosition","current","getCurrentTime","Row","className","InputGroup","FormControl","placeholder","value","url","onChange","e","target","Append","Button","onPlay","onPause","controls","config","youtube","playerVars","Col","block","onClick","currentCut","variant","TimeInput","props","formattedValue","styles","timeInput","label","Prepend","stepBtn","input","console","log","Grid","item","container","alignItems","play","cut","justify","timeRow","alignContent","buttons","xs","cuts","push","length","direction","map","idx","key","App","Container","rightCol","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5e5037d9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"timeRow\":\"CutsPanel_timeRow__3vagv\",\"timeInput\":\"CutsPanel_timeInput__1WRKw\",\"input\":\"CutsPanel_input__2f_8q\",\"stepBtn\":\"CutsPanel_stepBtn__2Chfk\",\"label\":\"CutsPanel_label__1W1PR\",\"buttons\":\"CutsPanel_buttons__2tzRS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CutItem_container__3Ib41\",\"play\":\"CutItem_play__F27QE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rightCol\":\"App_rightCol__2GgY6\"};","import { observable, makeObservable, configure } from 'mobx'\n\nconfigure({ enforceActions: 'never' })\n\nexport interface Cut {\n\tstartTime: number\n\tendTime: number\n}\n\nclass Store {\n\t@observable url: string = 'https://www.youtube.com/watch?v=jrOxsjdeccw'\n\t@observable currentCut: Cut | null = null\n\t@observable cuts: Cut[] = [\n\t\t{\n\t\t\tstartTime: 0,\n\t\t\tendTime: 0,\n\t\t},\n\t]\n\n\tconstructor() {\n\t\tmakeObservable(this)\n\t}\n}\n\nconst store = new Store()\n\nexport default store\n","function pad(x: number) {\n\tif (x < 10) return `0${x}`\n\treturn x\n}\n\nexport function formatTime(duration: number | null, long = false) {\n\tif (!duration) return `00:00:00`\n\tconst hours = Math.floor(duration / 60 / 60)\n\tconst mins = Math.floor(duration / 60)\n\tconst seconds = Math.floor(duration % 60)\n\tconst millis = Math.floor((duration - Math.floor(duration)) * 100)\n\tlet time = `${pad(hours)}:${pad(mins)}:${pad(seconds)}`\n\tif (long) time = `${time}:${pad(millis)}`\n\treturn time\n}\n","import React, { useEffect, useRef, useState } from 'react'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport FormControl from 'react-bootstrap/FormControl'\nimport { observer } from 'mobx-react'\nimport store from '../store'\nimport ReactPlayer from 'react-player'\nimport { formatTime } from '../utils/format-time'\n\nfunction PlayerPanel() {\n\tconst ref = useRef<ReactPlayer>(null)\n\tconst [playing, setPlaying] = useState(true)\n\tconst [position, setPosition] = useState<number | null>(null)\n\n\tuseEffect(() => {\n\t\tlet stopped = false\n\t\tfunction getPosition() {\n\t\t\tif (stopped || !ref.current) return\n\t\t\tsetPosition(ref.current.getCurrentTime())\n\t\t\trequestAnimationFrame(getPosition)\n\t\t}\n\t\trequestAnimationFrame(getPosition)\n\t\treturn () => {\n\t\t\tstopped = true\n\t\t}\n\t}, [])\n\n\tfunction startFrame() {\n\t\tconst time = ref.current?.getCurrentTime()!\n\t\tstore.currentCut = store.currentCut || {\n\t\t\tstartTime: 0,\n\t\t\tendTime: 0,\n\t\t}\n\t\tstore.currentCut.startTime = time\n\t\tif (store.currentCut.endTime < time) store.currentCut.endTime = time + 5\n\t}\n\n\tfunction endFrame() {\n\t\tconst time = ref.current?.getCurrentTime()!\n\t\tstore.currentCut = store.currentCut || {\n\t\t\tstartTime: 0,\n\t\t\tendTime: 0,\n\t\t}\n\t\tstore.currentCut.endTime = time\n\t\tif (store.currentCut.startTime > time) store.currentCut.startTime = time - 5\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Row className='padded'>\n\t\t\t\t<InputGroup className='mb-3'>\n\t\t\t\t\t<FormControl\n\t\t\t\t\t\tplaceholder='Copy YouTube url'\n\t\t\t\t\t\tvalue={store.url}\n\t\t\t\t\t\tonChange={(e) => (store.url = e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<InputGroup.Append>\n\t\t\t\t\t\t<Button>Search</Button>\n\t\t\t\t\t</InputGroup.Append>\n\t\t\t\t</InputGroup>\n\t\t\t</Row>\n\t\t\t<Row className='padded justify-content-center'>\n\t\t\t\t<ReactPlayer\n\t\t\t\t\tref={ref}\n\t\t\t\t\tplaying={playing}\n\t\t\t\t\turl={store.url}\n\t\t\t\t\t//onProgress={(e) => console.log(e)}\n\t\t\t\t\tonPlay={() => setPlaying(true)}\n\t\t\t\t\tonPause={() => setPlaying(false)}\n\t\t\t\t\tcontrols={true}\n\t\t\t\t\tconfig={{\n\t\t\t\t\t\tyoutube: {\n\t\t\t\t\t\t\tplayerVars: {\n\t\t\t\t\t\t\t\t//autoplay: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Row>\n\t\t\t<Row className='justify-content-center'>{formatTime(position, true)}</Row>\n\t\t\t<Row>\n\t\t\t\t<Col className='padded'>\n\t\t\t\t\t<Button block onClick={startFrame}>\n\t\t\t\t\t\tStart of frame\n\t\t\t\t\t</Button>\n\t\t\t\t</Col>\n\t\t\t\t<Col className='padded'>\n\t\t\t\t\t<Button block onClick={endFrame}>\n\t\t\t\t\t\tEnd of frame\n\t\t\t\t\t</Button>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<Col className='padded'>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tblock\n\t\t\t\t\t\tvariant={'outline-info'}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t//ref.current?.seekTo(3)\n\t\t\t\t\t\t\tsetPlaying(!playing)\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tContinue Watching\n\t\t\t\t\t</Button>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</>\n\t)\n}\n\nexport default observer(PlayerPanel)\n","import React, { ChangeEvent } from 'react'\nimport styles from './CutsPanel.module.css'\nimport { Button, Col, FormControl, InputGroup } from 'react-bootstrap'\nimport { formatTime } from '../utils/format-time'\n\ninterface Props {\n\tvalue: number | null\n\tlabel: string\n\tonChange: (value: number) => void\n}\n\nexport default function TimeInput(props: Props) {\n\tconst formattedValue = formatTime(props.value)\n\n\tfunction onChange(e: ChangeEvent) {\n\t\tconsole.log('--> ')\n\t}\n\treturn (\n\t\t<Col className={styles.timeInput}>\n\t\t\t<div className={styles.label}>{props.label}</div>\n\t\t\t<InputGroup>\n\t\t\t\t<InputGroup.Prepend>\n\t\t\t\t\t<Button variant='outline-dark' className={styles.stepBtn}>\n\t\t\t\t\t\t-\n\t\t\t\t\t</Button>\n\t\t\t\t</InputGroup.Prepend>\n\t\t\t\t<FormControl className={styles.input} value={formattedValue} onChange={onChange} />\n\t\t\t\t<InputGroup.Append>\n\t\t\t\t\t<Button variant='outline-dark' className={styles.stepBtn}>\n\t\t\t\t\t\t+\n\t\t\t\t\t</Button>\n\t\t\t\t</InputGroup.Append>\n\t\t\t</InputGroup>\n\t\t</Col>\n\t)\n}\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { Cut } from '../store'\nimport styles from './CutItem.module.css'\nimport { Button, Grid } from '@material-ui/core'\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow'\nimport TimeInput from './TimeInput'\n\ninterface Props {\n\tcut: Cut\n}\n\nfunction CutItem(props: Props) {\n\treturn (\n\t\t<Grid item className={styles.container} container>\n\t\t\t<Grid item alignItems='stretch'>\n\t\t\t\t<Button className={styles.play}>\n\t\t\t\t\t<PlayArrowIcon />\n\t\t\t\t</Button>\n\t\t\t</Grid>\n\t\t\t<Grid item>\n\t\t\t\t<TimeInput value={props.cut.startTime} label='Start time' onChange={() => {}} />\n\t\t\t</Grid>\n\t\t\t<Grid item>\n\t\t\t\t<TimeInput value={props.cut.endTime} label='Start time' onChange={() => {}} />\n\t\t\t</Grid>\n\t\t</Grid>\n\t)\n}\n\nexport default observer(CutItem)\n","import React from 'react'\nimport { Row } from 'react-bootstrap'\nimport store from '../store'\nimport TimeInput from './TimeInput'\nimport styles from './CutsPanel.module.css'\nimport { observer } from 'mobx-react'\nimport CutItem from './CutItem'\nimport { Button, Grid } from '@material-ui/core'\n\nexport function CutsPanel() {\n\tfunction changeStart() {}\n\n\tfunction changeEnd() {}\n\n\tfunction add() {\n\t\tif (!store.currentCut) return\n\t\tstore.cuts.push(store.currentCut)\n\t\tstore.currentCut = null\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Grid container justify='center' className={styles.timeRow} alignContent='center'>\n\t\t\t\t{store.currentCut ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t<TimeInput value={store.currentCut.startTime} label='Start time' onChange={changeStart} />\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t<TimeInput value={store.currentCut?.endTime} label='End time' onChange={changeEnd} />\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item className={styles.buttons} xs>\n\t\t\t\t\t\t\t<Button variant='contained'>Play</Button>\n\t\t\t\t\t\t\t<Button variant='contained' onClick={add}>\n\t\t\t\t\t\t\t\tAdd\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<Grid item>No current episode</Grid>\n\t\t\t\t)}\n\t\t\t</Grid>\n\t\t\t{store.cuts.length === 0 && <Row>Add your first episode (~5 sec). Max time of trailer - 60 sec.</Row>}\n\t\t\t<Grid container direction='column'>\n\t\t\t\t{store.cuts.map((cut, idx) => (\n\t\t\t\t\t<CutItem key={idx} cut={cut} />\n\t\t\t\t))}\n\t\t\t</Grid>\n\t\t</>\n\t)\n}\n\nexport default observer(CutsPanel)\n","import React from 'react'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport PlayerPanel from './components/PlayerPanel'\nimport CutsPanel from './components/CutsPanel'\nimport styles from './App.module.css'\nimport { Container } from '@material-ui/core'\n\nfunction App() {\n\treturn (\n\t\t<Container>\n\t\t\t<Row>\n\t\t\t\t<Col>\n\t\t\t\t\t<PlayerPanel />\n\t\t\t\t</Col>\n\t\t\t\t<Col className={styles.rightCol}>\n\t\t\t\t\t<CutsPanel />\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Container>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}